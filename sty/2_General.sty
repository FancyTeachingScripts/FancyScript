\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{sty/2_General}[]


\usetikzlibrary{shapes.geometric, arrows, positioning, shapes.geometric, arrows.meta, calc, bending,fadings}


\renewcommand{\umltextcolor}{\TFarbe}
\ifbeamer
    \renewcommand{\umlfillcolor}{black}
\else
    \renewcommand{\umlfillcolor}{white}
\fi
\renewcommand{\umldrawcolor}{\TFarbe}

\renewcommand{\emph}[1]{\textbf{#1}}
\providecommand{\currentsection}{\nameref{\thesection}}

\tikzstyle{startstop} = [rectangle, rounded corners, 
minimum width=2cm, 
minimum height=0.7cm,
text centered, 
draw=black]

\tikzstyle{io} = [trapezium, 
trapezium stretches=true, % A later addition
trapezium left angle=70, 
trapezium right angle=110, 
minimum width=2cm, 
minimum height=0.7cm, text centered, 
draw=black]

\tikzstyle{process} = [rectangle, 
minimum width=2cm, 
minimum height=0.7cm, 
text centered, 
text width=3cm, 
draw=black]

\tikzstyle{decision} = [diamond, 
minimum width=2cm, 
minimum height=1cm, 
text centered, 
draw=black]

\tikzstyle{arrow} = [thick,->,>=stealth]
\@ifundefined{NC@rewrite@C}{\newcolumntype{C}{>{\Centering\hspace{0pt}}X}}{}

\tikzstyle{dfddata} =[box, 
    rounded corners=1pt,  
    minimum width=1pt]

\tikzset{box/.style={draw, rectangle, rounded corners=3pt, align=center}}


\newcommand\calcVerticalBoxes[2]{%
  % Resthöhe bestimmen
  \newdimen\resthoehe
  \resthoehe=\dimexpr\pagegoal-\pagetotal\relax
  % Falls wir ausserhalb des Seitenbaus sind: \pagegoal = \maxdimen → Fallback
  \ifdim\pagegoal=\maxdimen
    \resthoehe=\dimexpr\vsize-\pagetotal\relax
  \fi
  \typeout{pagegoal: \the\pagegoal}%
  \typeout{pagetotal: \the\pagetotal}
  \typeout{resthoehe: \the\resthoehe}%
  \typeout{maxdimen: \the\maxdimen}%
  \typeout{vsize: \the\vsize}%
  \typeout{pgflinewidth: \the\pgflinewidth}%
  % --- alle Dimensionen in nackte Zahlen (pt) umwandeln ---
  \edef\cvb@restpt{\strip@pt\resthoehe}%
  \edef\cvb@linept{\strip@pt\pgflinewidth}%
  \edef\cvb@boxpt{\strip@pt\dimexpr #1\relax}%
  % Schutz gegen 0 oder negative Boxhöhe
  \ifdim\dimexpr #1\relax>\z@
    \pgfmathtruncatemacro\anzahlv{(\cvb@restpt-\cvb@linept)/\cvb@boxpt}%
  \else
    \def\anzahlv{0}%
  \fi
  \typeout{anzahlv: \anzahlv}
  % Gewünschte Anzahl vs. mögliche Anzahl vergleichen
  \ifnum#2>\anzahlv\relax
    \PackageInfo{sty/2_General}{#2 Kaestchen gefordert, aber nur \anzahlv\space passen. Verwende \anzahlv.}%
    \edef\vertcount{\anzahlv}%
  \else
    \edef\vertcount{#2}%
  \fi
  \typeout{vertcount: \vertcount}
}

\renewcommand{\hinweis}[1]{
    \ifhints
        {\color{gray}\small \faInfoCircle~#1}
    \fi
}

\newcommand{\kariertSimple}[2][0.5cm]{% 
	\begin{tikzpicture}[gray,step=#1]
	\pgfmathtruncatemacro\anzahl{(\linewidth-\pgflinewidth)/#1} % maximale Anzahl Kästchen pro Zeile
	\draw (0,0) rectangle (\anzahl*#1,#2*#1) (0,0) grid (\anzahl*#1,#2*#1);
	\end{tikzpicture} 
}

% % Der neue Befehl, der alles steuert.
% \newcommand{\kariertFill}[1][0.5cm]{%
%     \par\nobreak % Wichtig für eine korrekte Messung des verbleibenden Platzes.
%     \stepdimen=#1 % Speichert die gewünschte Kästchengröße.
%     \directlua{fill_remaining_space_with_grid()}% Startet die Berechnung und Ausgabe.
% }

% \newdimen\stepdimen

% \begin{luacode*}
% function fill_remaining_space_with_grid()
%     -- 1. Verbleibenden Platz in Scaled Points (sp) berechnen.
%     local remaining_sp = tex.pagegoal - tex.pagetotal - tex.pagedepth
    
%     -- 2. Die Kästchengröße aus dem TeX-Register in sp auslesen.
%     local step_sp = tex.dimen.stepdimen
    
%     -- 3. Anzahl der möglichen Zeilen berechnen.
%     if step_sp > 0 then
%         local num_rows = math.floor(remaining_sp / step_sp)
%         num_rows=num_rows-5
        
%         -- 4. Den \kariertSimple-Befehl mit den korrekten Werten in den TeX-Code "drucken".
%         if num_rows > 0 then
%             tex.sprint(string.format([[\kariertSimple[\the\stepdimen]{%d}]], num_rows))
%         end
%     end
% end
% \end{luacode*}


\renewcommand\kariert[2][0.5cm]{%
  % Prüft, ob das zweite Argument #2 gleich 0 ist
  %\ifnum#2=0
    % if #2 == 0 then
  %  \kariertFill[#1]%
  %\else
    \kariertSimple[#1]{#2}%
  %\fi
}


% #1: counter
% #2: formatting command (e.g., \arabic, \roman)
\renewcommand{\ShowAndStepCounter}[2]{%
    {%
        #2{#1}%
        \stepcounter{#1}%
    }%
}



\renewcommand{\multi}{\item[$\circ$]}

\renewcommand\liniert[2][1.2cm]{% 
	\begin{tikzpicture}[gray]
	\path[use as bounding box](0,0)rectangle(\linewidth,-#2*#1-0.5\pgflinewidth); 
	\foreach \n in {1,...,#2}\draw(0 ,-#1*\n )--(\linewidth,-#1*\n ); 
	\end{tikzpicture}}

\lstset{
tabsize = 1, %% set tab space width
keywordstyle = \color{purple}, %% set keyword color
stringstyle = \color{green}, %% set string color
rulecolor = \color{\TFarbe}, %% set frame color to avoid being affected by text color
breaklines = true, %% enable line breaking
numberstyle = \footnotesize,
language = Java , 
firstnumber = last , 
escapeinside={(*@}{@*)}
}

\ifbeamer
	\hypersetup{
		colorlinks=true,
		linkcolor=white,
		filecolor=magenta,      
		urlcolor=Lavender,
		%pdftitle={\Titeltext},
	}
\else
	\hypersetup{
		colorlinks=true,
		linkcolor=blue,
		filecolor=magenta,      
		urlcolor=BlueViolet,
		%pdftitle={\Titeltext},
	}
\fi